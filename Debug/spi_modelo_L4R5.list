
spi_modelo_L4R5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002174  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002330  08002330  00003330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002370  08002370  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002370  08002370  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002370  08002370  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002370  08002370  00003370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002374  08002374  00003374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20040000  08002378  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20040010  08002388  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040098  08002388  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070e1  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001646  00000000  00000000  0000b121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d6  00000000  00000000  0000cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002813a  00000000  00000000  0000d51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000908b  00000000  00000000  00035658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c7d  00000000  00000000  0003e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e2c  00000000  00000000  001333a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001351d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040010 	.word	0x20040010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002318 	.word	0x08002318

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040014 	.word	0x20040014
 80001f8:	08002318 	.word	0x08002318

080001fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000212:	4b28      	ldr	r3, [pc, #160]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a27      	ldr	r2, [pc, #156]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021e:	4b25      	ldr	r3, [pc, #148]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	60bb      	str	r3, [r7, #8]
 8000228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022e:	4a21      	ldr	r2, [pc, #132]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000236:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000242:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000246:	4a1b      	ldr	r2, [pc, #108]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800024e:	4b19      	ldr	r3, [pc, #100]	@ (80002b4 <MX_GPIO_Init+0xb8>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000260:	4815      	ldr	r0, [pc, #84]	@ (80002b8 <MX_GPIO_Init+0xbc>)
 8000262:	f000 fc8b 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2180      	movs	r1, #128	@ 0x80
 800026a:	4814      	ldr	r0, [pc, #80]	@ (80002bc <MX_GPIO_Init+0xc0>)
 800026c:	f000 fc86 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000270:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000282:	f107 030c 	add.w	r3, r7, #12
 8000286:	4619      	mov	r1, r3
 8000288:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <MX_GPIO_Init+0xbc>)
 800028a:	f000 fae5 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800028e:	2380      	movs	r3, #128	@ 0x80
 8000290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	2301      	movs	r3, #1
 8000294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	4619      	mov	r1, r3
 80002a4:	4805      	ldr	r0, [pc, #20]	@ (80002bc <MX_GPIO_Init+0xc0>)
 80002a6:	f000 fad7 	bl	8000858 <HAL_GPIO_Init>

}
 80002aa:	bf00      	nop
 80002ac:	3720      	adds	r7, #32
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000
 80002b8:	48000400 	.word	0x48000400
 80002bc:	48000800 	.word	0x48000800

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 f96c 	bl	80005a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f815 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f7ff ff95 	bl	80001fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d2:	f000 f85d 	bl	8000390 <MX_SPI1_Init>
    /* USER CODE BEGIN 3 */

	  // 1. Recebe o sinal do mestre e envia a resposta
	  	      // HAL_SPI_TransmitReceive: função bloqueante
	  	      // O escravo espera o NSS ser ativado pelo mestre para iniciar a comunicação.
	  	      if (HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) // função bloqueante
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2301      	movs	r3, #1
 80002de:	4a03      	ldr	r2, [pc, #12]	@ (80002ec <main+0x2c>)
 80002e0:	4903      	ldr	r1, [pc, #12]	@ (80002f0 <main+0x30>)
 80002e2:	4804      	ldr	r0, [pc, #16]	@ (80002f4 <main+0x34>)
 80002e4:	f001 fc69 	bl	8001bba <HAL_SPI_TransmitReceive>
 80002e8:	e7f5      	b.n	80002d6 <main+0x16>
 80002ea:	bf00      	nop
 80002ec:	2004002c 	.word	0x2004002c
 80002f0:	20040000 	.word	0x20040000
 80002f4:	20040030 	.word	0x20040030

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b096      	sub	sp, #88	@ 0x58
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0314 	add.w	r3, r7, #20
 8000302:	2244      	movs	r2, #68	@ 0x44
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 ffda 	bl	80022c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	463b      	mov	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800031a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800031e:	f000 fc65 	bl	8000bec <HAL_PWREx_ControlVoltageScaling>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000328:	f000 f82c 	bl	8000384 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800032c:	2310      	movs	r3, #16
 800032e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000330:	2301      	movs	r3, #1
 8000332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000338:	2360      	movs	r3, #96	@ 0x60
 800033a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033c:	2300      	movs	r3, #0
 800033e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fcf5 	bl	8000d34 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000350:	f000 f818 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f8fb 	bl	8001568 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000378:	f000 f804 	bl	8000384 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3758      	adds	r7, #88	@ 0x58
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <Error_Handler+0x8>

08000390 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_SPI1_Init+0x68>)
 8000396:	4a19      	ldr	r2, [pc, #100]	@ (80003fc <MX_SPI1_Init+0x6c>)
 8000398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800039a:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <MX_SPI1_Init+0x68>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a6:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ae:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003da:	2200      	movs	r2, #0
 80003dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_SPI1_Init+0x68>)
 80003e6:	f001 fb45 	bl	8001a74 <HAL_SPI_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80003f0:	f7ff ffc8 	bl	8000384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20040030 	.word	0x20040030
 80003fc:	40013000 	.word	0x40013000

08000400 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	@ 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a17      	ldr	r2, [pc, #92]	@ (800047c <HAL_SPI_MspInit+0x7c>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d128      	bne.n	8000474 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 8000424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000426:	4a16      	ldr	r2, [pc, #88]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 8000428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800042c:	6613      	str	r3, [r2, #96]	@ 0x60
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000436:	613b      	str	r3, [r7, #16]
 8000438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <HAL_SPI_MspInit+0x80>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000452:	23f0      	movs	r3, #240	@ 0xf0
 8000454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000456:	2302      	movs	r3, #2
 8000458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000462:	2305      	movs	r3, #5
 8000464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000470:	f000 f9f2 	bl	8000858 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000474:	bf00      	nop
 8000476:	3728      	adds	r7, #40	@ 0x28
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40013000 	.word	0x40013000
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048e:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6613      	str	r3, [r2, #96]	@ 0x60
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000522:	f000 f893 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000554:	f7ff ffea 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	@ (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	@ (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057e:	f001 fea7 	bl	80022d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000582:	f7ff fe9d 	bl	80002c0 <main>

08000586 <LoopForever>:

LoopForever:
    b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000588:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800058c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000590:	20040010 	.word	0x20040010
  ldr r2, =_sidata
 8000594:	08002378 	.word	0x08002378
  ldr r2, =_sbss
 8000598:	20040010 	.word	0x20040010
  ldr r4, =_ebss
 800059c:	20040098 	.word	0x20040098

080005a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_IRQHandler>

080005a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f91f 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f80e 	bl	80005d4 <HAL_InitTick>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	71fb      	strb	r3, [r7, #7]
 80005c2:	e001      	b.n	80005c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c4:	f7ff ff5e 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <HAL_InitTick+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d023      	beq.n	8000630 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_InitTick+0x70>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <HAL_InitTick+0x6c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f91d 	bl	800083e <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10f      	bne.n	800062a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d809      	bhi.n	8000624 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 f8f5 	bl	8000806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <HAL_InitTick+0x74>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e007      	b.n	8000634 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	e004      	b.n	8000634 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e001      	b.n	8000634 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2004000c 	.word	0x2004000c
 8000644:	20040004 	.word	0x20040004
 8000648:	20040008 	.word	0x20040008

0800064c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_IncTick+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_IncTick+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_IncTick+0x24>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2004000c 	.word	0x2004000c
 8000670:	20040094 	.word	0x20040094

08000674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <HAL_GetTick+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20040094 	.word	0x20040094

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	@ (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	@ (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 32ff 	mov.w	r2, #4294967295
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	f04f 31ff 	mov.w	r1, #4294967295
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
         );
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	@ 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007bc:	d301      	bcc.n	80007c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007be:	2301      	movs	r3, #1
 80007c0:	e00f      	b.n	80007e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c2:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <SysTick_Config+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ca:	210f      	movs	r1, #15
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f7ff ff8e 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <SysTick_Config+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007da:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <SysTick_Config+0x40>)
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff47 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff5c 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ff8e 	bl	8000744 <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff5d 	bl	80006f0 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffb0 	bl	80007ac <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e166      	b.n	8000b36 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	2101      	movs	r1, #1
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f000 8158 	beq.w	8000b30 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	2b01      	cmp	r3, #1
 800088a:	d005      	beq.n	8000898 <HAL_GPIO_Init+0x40>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	2b02      	cmp	r3, #2
 8000896:	d130      	bne.n	80008fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	2203      	movs	r2, #3
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4313      	orrs	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ce:	2201      	movs	r2, #1
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	091b      	lsrs	r3, r3, #4
 80008e4:	f003 0201 	and.w	r2, r3, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b03      	cmp	r3, #3
 8000904:	d017      	beq.n	8000936 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d123      	bne.n	800098a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3208      	adds	r2, #8
 8000984:	6939      	ldr	r1, [r7, #16]
 8000986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 0203 	and.w	r2, r3, #3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b2 	beq.w	8000b30 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009cc:	4b61      	ldr	r3, [pc, #388]	@ (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d0:	4a60      	ldr	r2, [pc, #384]	@ (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e4:	4a5c      	ldr	r2, [pc, #368]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a0e:	d02b      	beq.n	8000a68 <HAL_GPIO_Init+0x210>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a52      	ldr	r2, [pc, #328]	@ (8000b5c <HAL_GPIO_Init+0x304>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d025      	beq.n	8000a64 <HAL_GPIO_Init+0x20c>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a51      	ldr	r2, [pc, #324]	@ (8000b60 <HAL_GPIO_Init+0x308>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d01f      	beq.n	8000a60 <HAL_GPIO_Init+0x208>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a50      	ldr	r2, [pc, #320]	@ (8000b64 <HAL_GPIO_Init+0x30c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d019      	beq.n	8000a5c <HAL_GPIO_Init+0x204>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b68 <HAL_GPIO_Init+0x310>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d013      	beq.n	8000a58 <HAL_GPIO_Init+0x200>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a4e      	ldr	r2, [pc, #312]	@ (8000b6c <HAL_GPIO_Init+0x314>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d00d      	beq.n	8000a54 <HAL_GPIO_Init+0x1fc>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000b70 <HAL_GPIO_Init+0x318>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d007      	beq.n	8000a50 <HAL_GPIO_Init+0x1f8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4c      	ldr	r2, [pc, #304]	@ (8000b74 <HAL_GPIO_Init+0x31c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d101      	bne.n	8000a4c <HAL_GPIO_Init+0x1f4>
 8000a48:	2307      	movs	r3, #7
 8000a4a:	e00e      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	e00c      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a50:	2306      	movs	r3, #6
 8000a52:	e00a      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a54:	2305      	movs	r3, #5
 8000a56:	e008      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e006      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e004      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	f002 0203 	and.w	r2, r2, #3
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	4093      	lsls	r3, r2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a7a:	4937      	ldr	r1, [pc, #220]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3302      	adds	r3, #2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a88:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aac:	4a32      	ldr	r2, [pc, #200]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad6:	4a28      	ldr	r2, [pc, #160]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <HAL_GPIO_Init+0x320>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f47f ae91 	bne.w	8000868 <HAL_GPIO_Init+0x10>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	48001000 	.word	0x48001000
 8000b6c:	48001400 	.word	0x48001400
 8000b70:	48001800 	.word	0x48001800
 8000b74:	48001c00 	.word	0x48001c00
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b9a:	887a      	ldrh	r2, [r7, #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bbc:	d102      	bne.n	8000bc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc2:	e00b      	b.n	8000bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd2:	d102      	bne.n	8000bda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd8:	e000      	b.n	8000bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000bda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d141      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c06:	d131      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c08:	4b47      	ldr	r3, [pc, #284]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c0e:	4a46      	ldr	r2, [pc, #280]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	4b43      	ldr	r3, [pc, #268]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c20:	4a41      	ldr	r2, [pc, #260]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000c28:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2232      	movs	r2, #50	@ 0x32
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	4a3f      	ldr	r2, [pc, #252]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c3e:	e002      	b.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c46:	4b38      	ldr	r3, [pc, #224]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c52:	d102      	bne.n	8000c5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f2      	bne.n	8000c40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c66:	d158      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e057      	b.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c72:	4a2d      	ldr	r2, [pc, #180]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c7c:	e04d      	b.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c84:	d141      	bne.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c86:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c92:	d131      	bne.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c9a:	4a23      	ldr	r2, [pc, #140]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cac:	4a1e      	ldr	r2, [pc, #120]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2232      	movs	r2, #50	@ 0x32
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	0c9b      	lsrs	r3, r3, #18
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cca:	e002      	b.n	8000cd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cde:	d102      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f2      	bne.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf2:	d112      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e011      	b.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d08:	e007      	b.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40007000 	.word	0x40007000
 8000d2c:	20040004 	.word	0x20040004
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f000 bc08 	b.w	8001558 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d48:	4b96      	ldr	r3, [pc, #600]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d52:	4b94      	ldr	r3, [pc, #592]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80e4 	beq.w	8000f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d007      	beq.n	8000d80 <HAL_RCC_OscConfig+0x4c>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b0c      	cmp	r3, #12
 8000d74:	f040 808b 	bne.w	8000e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	f040 8087 	bne.w	8000e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d80:	4b88      	ldr	r3, [pc, #544]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d005      	beq.n	8000d98 <HAL_RCC_OscConfig+0x64>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e3df      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	4b81      	ldr	r3, [pc, #516]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_RCC_OscConfig+0x7e>
 8000da8:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000db0:	e005      	b.n	8000dbe <HAL_RCC_OscConfig+0x8a>
 8000db2:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d223      	bcs.n	8000e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd94 	bl	80018f4 <RCC_SetFlashLatencyFromMSIRange>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e3c0      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd6:	4b73      	ldr	r3, [pc, #460]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a72      	ldr	r2, [pc, #456]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b70      	ldr	r3, [pc, #448]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	496d      	ldr	r1, [pc, #436]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df4:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	4968      	ldr	r1, [pc, #416]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
 8000e08:	e025      	b.n	8000e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0a:	4b66      	ldr	r3, [pc, #408]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a65      	ldr	r2, [pc, #404]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b63      	ldr	r3, [pc, #396]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4960      	ldr	r1, [pc, #384]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e28:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	495b      	ldr	r1, [pc, #364]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fd54 	bl	80018f4 <RCC_SetFlashLatencyFromMSIRange>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e380      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e56:	f000 fcc1 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	4b51      	ldr	r3, [pc, #324]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	4950      	ldr	r1, [pc, #320]	@ (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000e68:	5ccb      	ldrb	r3, [r1, r3]
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	4a4e      	ldr	r2, [pc, #312]	@ (8000fac <HAL_RCC_OscConfig+0x278>)
 8000e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e76:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb0 <HAL_RCC_OscConfig+0x27c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fbaa 	bl	80005d4 <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d052      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	e364      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d032      	beq.n	8000efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e96:	4b43      	ldr	r3, [pc, #268]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a42      	ldr	r2, [pc, #264]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fbe7 	bl	8000674 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fbe3 	bl	8000674 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e34d      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec8:	4b36      	ldr	r3, [pc, #216]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a35      	ldr	r2, [pc, #212]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4930      	ldr	r1, [pc, #192]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	492b      	ldr	r1, [pc, #172]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
 8000efa:	e01a      	b.n	8000f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fbb4 	bl	8000674 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbb0 	bl	8000674 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e31a      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1dc>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d073      	beq.n	8001026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x21c>
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d10e      	bne.n	8000f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d063      	beq.n	8001024 <HAL_RCC_OscConfig+0x2f0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d15f      	bne.n	8001024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2f7      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x24c>
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e025      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f88:	d114      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x280>
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a02      	ldr	r2, [pc, #8]	@ (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e013      	b.n	8000fcc <HAL_RCC_OscConfig+0x298>
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	08002330 	.word	0x08002330
 8000fac:	20040004 	.word	0x20040004
 8000fb0:	20040008 	.word	0x20040008
 8000fb4:	4ba0      	ldr	r3, [pc, #640]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a9c      	ldr	r2, [pc, #624]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb4e 	bl	8000674 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb4a 	bl	8000674 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	@ 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e2b4      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	4b92      	ldr	r3, [pc, #584]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2a8>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fb3a 	bl	8000674 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fb36 	bl	8000674 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e2a0      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	4b88      	ldr	r3, [pc, #544]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x2d0>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d060      	beq.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x310>
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d119      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d116      	bne.n	8001072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001044:	4b7c      	ldr	r3, [pc, #496]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x328>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e27d      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b76      	ldr	r3, [pc, #472]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	4973      	ldr	r1, [pc, #460]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	e040      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d023      	beq.n	80010c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107a:	4b6f      	ldr	r3, [pc, #444]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a6e      	ldr	r2, [pc, #440]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff faf5 	bl	8000674 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff faf1 	bl	8000674 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e25b      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a0:	4b65      	ldr	r3, [pc, #404]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b62      	ldr	r3, [pc, #392]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	495f      	ldr	r1, [pc, #380]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
 80010c0:	e018      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fad1 	bl	8000674 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff facd 	bl	8000674 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e237      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	4b53      	ldr	r3, [pc, #332]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f0      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03c      	beq.n	800117a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01c      	beq.n	8001142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001108:	4b4b      	ldr	r3, [pc, #300]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110e:	4a4a      	ldr	r2, [pc, #296]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff faac 	bl	8000674 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff faa8 	bl	8000674 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e212      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001132:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ef      	beq.n	8001120 <HAL_RCC_OscConfig+0x3ec>
 8001140:	e01b      	b.n	800117a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b3d      	ldr	r3, [pc, #244]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001148:	4a3b      	ldr	r2, [pc, #236]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001152:	f7ff fa8f 	bl	8000674 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fa8b 	bl	8000674 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1f5      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116c:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800116e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ef      	bne.n	800115a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10d      	bne.n	80011b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119c:	4a26      	ldr	r2, [pc, #152]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <HAL_RCC_OscConfig+0x508>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d118      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <HAL_RCC_OscConfig+0x508>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_RCC_OscConfig+0x508>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa52 	bl	8000674 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d4:	f7ff fa4e 	bl	8000674 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1b8      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_RCC_OscConfig+0x508>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x4d8>
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 80011fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800120a:	e029      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d115      	bne.n	8001240 <HAL_RCC_OscConfig+0x50c>
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121a:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122a:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <HAL_RCC_OscConfig+0x504>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001234:	e014      	b.n	8001260 <HAL_RCC_OscConfig+0x52c>
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40007000 	.word	0x40007000
 8001240:	4b9d      	ldr	r3, [pc, #628]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001246:	4a9c      	ldr	r2, [pc, #624]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001250:	4b99      	ldr	r3, [pc, #612]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001256:	4a98      	ldr	r2, [pc, #608]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001258:	f023 0304 	bic.w	r3, r3, #4
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d016      	beq.n	8001296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fa04 	bl	8000674 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fa00 	bl	8000674 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e168      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	4b8c      	ldr	r3, [pc, #560]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ed      	beq.n	8001270 <HAL_RCC_OscConfig+0x53c>
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff f9ed 	bl	8000674 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff f9e9 	bl	8000674 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e151      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	4b80      	ldr	r3, [pc, #512]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ed      	bne.n	800129e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b7b      	ldr	r3, [pc, #492]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	4a7a      	ldr	r2, [pc, #488]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03c      	beq.n	800135a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01c      	beq.n	8001322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012e8:	4b73      	ldr	r3, [pc, #460]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80012ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012ee:	4a72      	ldr	r2, [pc, #456]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff f9bc 	bl	8000674 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001300:	f7ff f9b8 	bl	8000674 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e122      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001312:	4b69      	ldr	r3, [pc, #420]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0ef      	beq.n	8001300 <HAL_RCC_OscConfig+0x5cc>
 8001320:	e01b      	b.n	800135a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001322:	4b65      	ldr	r3, [pc, #404]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001328:	4a63      	ldr	r2, [pc, #396]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001332:	f7ff f99f 	bl	8000674 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800133a:	f7ff f99b 	bl	8000674 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e105      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800134c:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 800134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ef      	bne.n	800133a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80f9 	beq.w	8001556 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	2b02      	cmp	r3, #2
 800136a:	f040 80cf 	bne.w	800150c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800136e:	4b52      	ldr	r3, [pc, #328]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137e:	429a      	cmp	r2, r3
 8001380:	d12c      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	3b01      	subs	r3, #1
 800138e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d123      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d11b      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d113      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	3b01      	subs	r3, #1
 80013c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d109      	bne.n	80013dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	3b01      	subs	r3, #1
 80013d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d071      	beq.n	80014c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d068      	beq.n	80014b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013ee:	4b32      	ldr	r3, [pc, #200]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0ac      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a2d      	ldr	r2, [pc, #180]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001408:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800140a:	f7ff f933 	bl	8000674 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff f92f 	bl	8000674 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e099      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <HAL_RCC_OscConfig+0x788>)
 8001436:	4013      	ands	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001440:	3a01      	subs	r2, #1
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	4311      	orrs	r1, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800144a:	0212      	lsls	r2, r2, #8
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001452:	0852      	lsrs	r2, r2, #1
 8001454:	3a01      	subs	r2, #1
 8001456:	0552      	lsls	r2, r2, #21
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800145e:	0852      	lsrs	r2, r2, #1
 8001460:	3a01      	subs	r2, #1
 8001462:	0652      	lsls	r2, r2, #25
 8001464:	4311      	orrs	r1, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800146a:	06d2      	lsls	r2, r2, #27
 800146c:	430a      	orrs	r2, r1
 800146e:	4912      	ldr	r1, [pc, #72]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800148c:	f7ff f8f2 	bl	8000674 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f8ee 	bl	8000674 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e058      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <HAL_RCC_OscConfig+0x784>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b2:	e050      	b.n	8001556 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e04f      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c0:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d144      	bne.n	8001556 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a23      	ldr	r2, [pc, #140]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a20      	ldr	r2, [pc, #128]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014e4:	f7ff f8c6 	bl	8000674 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff f8c2 	bl	8000674 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e02c      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x7b8>
 800150a:	e024      	b.n	8001556 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d01f      	beq.n	8001552 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 8001518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff f8a9 	bl	8000674 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff f8a5 	bl	8000674 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4905      	ldr	r1, [pc, #20]	@ (8001560 <HAL_RCC_OscConfig+0x82c>)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_RCC_OscConfig+0x830>)
 800154c:	4013      	ands	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e001      	b.n	8001556 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	feeefffc 	.word	0xfeeefffc

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e11d      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b90      	ldr	r3, [pc, #576]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d910      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b8d      	ldr	r3, [pc, #564]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 020f 	bic.w	r2, r3, #15
 8001596:	498b      	ldr	r1, [pc, #556]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b89      	ldr	r3, [pc, #548]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e105      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d010      	beq.n	80015de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d908      	bls.n	80015de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b7e      	ldr	r3, [pc, #504]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	497b      	ldr	r1, [pc, #492]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d079      	beq.n	80016de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d11e      	bne.n	8001630 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	4b75      	ldr	r3, [pc, #468]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0dc      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001602:	f000 f9d1 	bl	80019a8 <RCC_GetSysClockFreqFromPLLSource>
 8001606:	4603      	mov	r3, r0
 8001608:	4a70      	ldr	r2, [pc, #448]	@ (80017cc <HAL_RCC_ClockConfig+0x264>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d946      	bls.n	800169c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800160e:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d140      	bne.n	800169c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800161a:	4b6b      	ldr	r3, [pc, #428]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001622:	4a69      	ldr	r2, [pc, #420]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e035      	b.n	800169c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001638:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d115      	bne.n	8001670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0b9      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001650:	4b5d      	ldr	r3, [pc, #372]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0ad      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001660:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0a5      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001670:	f000 f8b4 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001674:	4603      	mov	r3, r0
 8001676:	4a55      	ldr	r2, [pc, #340]	@ (80017cc <HAL_RCC_ClockConfig+0x264>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d90f      	bls.n	800169c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800167c:	4b52      	ldr	r3, [pc, #328]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001688:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001690:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001696:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800169c:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 0203 	bic.w	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4947      	ldr	r1, [pc, #284]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ae:	f7fe ffe1 	bl	8000674 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7fe ffdd 	bl	8000674 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e077      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016cc:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 020c 	and.w	r2, r3, #12
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	429a      	cmp	r2, r3
 80016dc:	d1eb      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b80      	cmp	r3, #128	@ 0x80
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016e4:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 80016ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d010      	beq.n	800171e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	429a      	cmp	r2, r3
 800170a:	d208      	bcs.n	800171e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	492b      	ldr	r1, [pc, #172]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d210      	bcs.n	800174e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172c:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 020f 	bic.w	r2, r3, #15
 8001734:	4923      	ldr	r1, [pc, #140]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_ClockConfig+0x25c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e036      	b.n	80017bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4918      	ldr	r1, [pc, #96]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4910      	ldr	r1, [pc, #64]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178c:	f000 f826 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <HAL_RCC_ClockConfig+0x260>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <HAL_RCC_ClockConfig+0x268>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_RCC_ClockConfig+0x26c>)
 80017aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_RCC_ClockConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe ff0f 	bl	80005d4 <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	04c4b400 	.word	0x04c4b400
 80017d0:	08002330 	.word	0x08002330
 80017d4:	20040004 	.word	0x20040004
 80017d8:	20040008 	.word	0x20040008

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f4:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x34>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d121      	bne.n	800184e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d11e      	bne.n	800184e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001810:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d107      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800181c:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e005      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800182c:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10d      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d102      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e004      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d101      	bne.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001862:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d134      	bne.n	80018d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0xa6>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d003      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0xac>
 8001880:	e005      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001884:	617b      	str	r3, [r7, #20]
      break;
 8001886:	e005      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800188a:	617b      	str	r3, [r7, #20]
      break;
 800188c:	e002      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	617b      	str	r3, [r7, #20]
      break;
 8001892:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3301      	adds	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	0e5b      	lsrs	r3, r3, #25
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	3301      	adds	r3, #1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018d4:	69bb      	ldr	r3, [r7, #24]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08002340 	.word	0x08002340
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800190c:	f7ff f94e 	bl	8000bac <HAL_PWREx_GetVoltageRange>
 8001910:	6178      	str	r0, [r7, #20]
 8001912:	e014      	b.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800192c:	f7ff f93e 	bl	8000bac <HAL_PWREx_GetVoltageRange>
 8001930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001944:	d10b      	bne.n	800195e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b80      	cmp	r3, #128	@ 0x80
 800194a:	d913      	bls.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001950:	d902      	bls.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001952:	2302      	movs	r3, #2
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e00d      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001958:	2301      	movs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e00a      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b7f      	cmp	r3, #127	@ 0x7f
 8001962:	d902      	bls.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e004      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b70      	cmp	r3, #112	@ 0x70
 800196e:	d101      	bne.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 020f 	bic.w	r2, r3, #15
 800197c:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40022000 	.word	0x40022000

080019a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d00b      	beq.n	80019d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d825      	bhi.n	8001a10 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d008      	beq.n	80019dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d11f      	bne.n	8001a10 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80019d2:	613b      	str	r3, [r7, #16]
    break;
 80019d4:	e01f      	b.n	8001a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80019d6:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80019d8:	613b      	str	r3, [r7, #16]
    break;
 80019da:	e01c      	b.n	8001a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e005      	b.n	8001a04 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001a04:	4a1a      	ldr	r2, [pc, #104]	@ (8001a70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
    break;
 8001a0e:	e002      	b.n	8001a16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
    break;
 8001a14:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	fb03 f202 	mul.w	r2, r3, r2
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0e5b      	lsrs	r3, r3, #25
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3301      	adds	r3, #1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001a56:	683b      	ldr	r3, [r7, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	08002340 	.word	0x08002340

08001a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e095      	b.n	8001bb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a96:	d009      	beq.n	8001aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
 8001a9e:	e005      	b.n	8001aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fc9a 	bl	8000400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001aec:	d902      	bls.n	8001af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	e002      	b.n	8001afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001b02:	d007      	beq.n	8001b14 <HAL_SPI_Init+0xa0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b56:	ea42 0103 	orr.w	r1, r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	f003 0204 	and.w	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b90:	ea42 0103 	orr.w	r1, r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b08a      	sub	sp, #40	@ 0x28
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bcc:	f7fe fd52 	bl	8000674 <HAL_GetTick>
 8001bd0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001bd8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d00c      	beq.n	8001c08 <HAL_SPI_TransmitReceive+0x4e>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf4:	d106      	bne.n	8001c04 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_TransmitReceive+0x4a>
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d001      	beq.n	8001c08 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
 8001c06:	e1f3      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x60>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x60>
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1e8      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_SPI_TransmitReceive+0x72>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e1e1      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d003      	beq.n	8001c48 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2205      	movs	r2, #5
 8001c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c8a:	d802      	bhi.n	8001c92 <HAL_SPI_TransmitReceive+0xd8>
 8001c8c:	8abb      	ldrh	r3, [r7, #20]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d908      	bls.n	8001ca4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	e007      	b.n	8001cb4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cb2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d007      	beq.n	8001cd2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cda:	f240 8083 	bls.w	8001de4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_TransmitReceive+0x132>
 8001ce6:	8afb      	ldrh	r3, [r7, #22]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d16f      	bne.n	8001dcc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfc:	1c9a      	adds	r2, r3, #2
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d10:	e05c      	b.n	8001dcc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d11b      	bne.n	8001d58 <HAL_SPI_TransmitReceive+0x19e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_SPI_TransmitReceive+0x19e>
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d113      	bne.n	8001d58 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	1c9a      	adds	r2, r3, #2
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d11c      	bne.n	8001da0 <HAL_SPI_TransmitReceive+0x1e6>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	1c9a      	adds	r2, r3, #2
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001da0:	f7fe fc68 	bl	8000674 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d80d      	bhi.n	8001dcc <HAL_SPI_TransmitReceive+0x212>
 8001db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d009      	beq.n	8001dcc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e111      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d19d      	bne.n	8001d12 <HAL_SPI_TransmitReceive+0x158>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d197      	bne.n	8001d12 <HAL_SPI_TransmitReceive+0x158>
 8001de2:	e0e5      	b.n	8001fb0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_SPI_TransmitReceive+0x23a>
 8001dec:	8afb      	ldrh	r3, [r7, #22]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 80d1 	bne.w	8001f96 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d912      	bls.n	8001e24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b02      	subs	r3, #2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e22:	e0b8      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e4a:	e0a4      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d134      	bne.n	8001ec4 <HAL_SPI_TransmitReceive+0x30a>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d02f      	beq.n	8001ec4 <HAL_SPI_TransmitReceive+0x30a>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d12c      	bne.n	8001ec4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d912      	bls.n	8001e9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e78:	881a      	ldrh	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b02      	subs	r3, #2
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e98:	e012      	b.n	8001ec0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d148      	bne.n	8001f64 <HAL_SPI_TransmitReceive+0x3aa>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d042      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d923      	bls.n	8001f32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	1c9a      	adds	r2, r3, #2
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b02      	subs	r3, #2
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d81f      	bhi.n	8001f60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e016      	b.n	8001f60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f103 020c 	add.w	r2, r3, #12
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f64:	f7fe fb86 	bl	8000674 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d803      	bhi.n	8001f7c <HAL_SPI_TransmitReceive+0x3c2>
 8001f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d102      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x3c8>
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e02c      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f47f af55 	bne.w	8001e4c <HAL_SPI_TransmitReceive+0x292>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f af4e 	bne.w	8001e4c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f93d 	bl	8002234 <SPI_EndRxTxTransaction>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002008:	f7fe fb34 	bl	8000674 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002018:	f7fe fb2c 	bl	8000674 <HAL_GetTick>
 800201c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800201e:	4b39      	ldr	r3, [pc, #228]	@ (8002104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	0d1b      	lsrs	r3, r3, #20
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800202e:	e054      	b.n	80020da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d050      	beq.n	80020da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002038:	f7fe fb1c 	bl	8000674 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d902      	bls.n	800204e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d13d      	bne.n	80020ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800205c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002066:	d111      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002070:	d004      	beq.n	800207c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d107      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800208a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002094:	d10f      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e017      	b.n	80020fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d19b      	bne.n	8002030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20040004 	.word	0x20040004

08002108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800211a:	f7fe faab 	bl	8000674 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800212a:	f7fe faa3 	bl	8000674 <HAL_GetTick>
 800212e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002138:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00da      	lsls	r2, r3, #3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	0d1b      	lsrs	r3, r3, #20
 8002148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002150:	e060      	b.n	8002214 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002158:	d107      	bne.n	800216a <SPI_WaitFifoStateUntilTimeout+0x62>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002168:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d050      	beq.n	8002214 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002172:	f7fe fa7f 	bl	8000674 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217e:	429a      	cmp	r2, r3
 8002180:	d902      	bls.n	8002188 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d13d      	bne.n	8002204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002196:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021a0:	d111      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021aa:	d004      	beq.n	80021b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b4:	d107      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ce:	d10f      	bne.n	80021f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e010      	b.n	8002226 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	3b01      	subs	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d196      	bne.n	8002152 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20040004 	.word	0x20040004

08002234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff ff5b 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e027      	b.n	80022b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff fec0 	bl	8001ff8 <SPI_WaitFlagStateUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e014      	b.n	80022b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff ff34 	bl	8002108 <SPI_WaitFifoStateUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e000      	b.n	80022b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <memset>:
 80022c0:	4402      	add	r2, r0
 80022c2:	4603      	mov	r3, r0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d100      	bne.n	80022ca <memset+0xa>
 80022c8:	4770      	bx	lr
 80022ca:	f803 1b01 	strb.w	r1, [r3], #1
 80022ce:	e7f9      	b.n	80022c4 <memset+0x4>

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d0d      	ldr	r5, [pc, #52]	@ (8002308 <__libc_init_array+0x38>)
 80022d4:	4c0d      	ldr	r4, [pc, #52]	@ (800230c <__libc_init_array+0x3c>)
 80022d6:	1b64      	subs	r4, r4, r5
 80022d8:	10a4      	asrs	r4, r4, #2
 80022da:	2600      	movs	r6, #0
 80022dc:	42a6      	cmp	r6, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	4d0b      	ldr	r5, [pc, #44]	@ (8002310 <__libc_init_array+0x40>)
 80022e2:	4c0c      	ldr	r4, [pc, #48]	@ (8002314 <__libc_init_array+0x44>)
 80022e4:	f000 f818 	bl	8002318 <_init>
 80022e8:	1b64      	subs	r4, r4, r5
 80022ea:	10a4      	asrs	r4, r4, #2
 80022ec:	2600      	movs	r6, #0
 80022ee:	42a6      	cmp	r6, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f8:	4798      	blx	r3
 80022fa:	3601      	adds	r6, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002302:	4798      	blx	r3
 8002304:	3601      	adds	r6, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	08002370 	.word	0x08002370
 800230c:	08002370 	.word	0x08002370
 8002310:	08002370 	.word	0x08002370
 8002314:	08002374 	.word	0x08002374

08002318 <_init>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr

08002324 <_fini>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr
